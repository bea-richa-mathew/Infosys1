from time import sleep

import pandas as pd
import json

from run_prompt import execute_gemini_for_tweet_creation, execute_gemini_for_tweet_prediction


def top_5_selection(analysed_tweets,engagement_type:str):
    df = pd.DataFrame(analysed_tweets) # 🐼
    filtered_df = df[df['engagement_type'] == engagement_type]
    return filtered_df.nlargest(15, columns=['engagement_score']).values.tolist()

def create_tweet(prompt):
    with open("analyzed_tweets.json") as f:
        analysed_tweets = json.load(f)
        engagement_type = "comment"

        top_5_tweets = top_5_selection(analysed_tweets,engagement_type)

        system_prompt = f"""
        Create a engaging twitter tweet for my tech company
        PROMPT: {prompt}
        
        Here are some example tweets and their sentiment
        analysis with very high user
        engagements of other similar companies.
        Example Tweets: 
        {top_5_tweets}
        """

        out_a = execute_gemini_for_tweet_creation( # niche LLM
            prompt=system_prompt, # niche LLM System prompt
            model="gemini-2.5-flash-lite"
        )
        out_dict = json.loads(out_a)
        tweet_a = out_dict['tweet']
        print("TWEET_A ======>")
        print(tweet_a)

        sleep(2)

        out_b = execute_gemini_for_tweet_creation( # niche LLM
            prompt=system_prompt, # niche LLM system prompt
            model="gemini-2.5-flash-lite"
        )
        out_dict_b = json.loads(out_b)
        tweet_b = out_dict_b['tweet']
        print("TWEET_B ======>")
        print(tweet_b)

        sleep(2)

        prompt_for_comparing = f"""
            You are given two tweets generated by different AI models.
            Tweet A: {tweet_a}
            Tweet B: {tweet_b}
            Your task is to compare both tweets with the sample set of best performing
            tweets found
            Best Performing Tweets: 
            {top_5_tweets}
             
            upon comparing the tweets with the sample set and running a simulation 
            decide which tweet is better overall based on the following criteria:
            Engagement – Does it capture attention and encourage interaction (likes, shares, comments)?
            Relevance – Is the content aligned with the given topic or context?
            Audience Relativeness
            
              Provide:
        - tweet_a_vs_tweet_b: Comparative analysis highlighting strengths and weaknesses of each tweet.
        - prediction: Which tweet will perform better and why.
        - explanation: Reasoning referencing tone, structure, and audience alignment.
        """
        prediction_res = execute_gemini_for_tweet_prediction(
            prompt=prompt_for_comparing,
            model="gemini-2.5-flash-lite"
        )
        out_prediction = json.loads(prediction_res)
        tweet_a_vs_tweet_b = out_prediction['tweet_a_vs_tweet_b']
        prediction = out_prediction['prediction']
        explanation = out_prediction['explanation']

        print("TWEET A VS B ======>")
        print(tweet_a_vs_tweet_b)
        print("PREDICTION ======>")
        print(prediction)
        print("EXPLANATION ======>")
        print(explanation)

        return {
            "tweet_a": tweet_a,
            "tweet_b": tweet_b,
            "tweet_a_vs_tweet_b": tweet_a_vs_tweet_b,
            "prediction": prediction,
            "explanation": explanation
        }








